#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Graph;


my $graph = Graph->new;
my %files;


my @sorted = do
{
    no warnings 'numeric';
    sort { basename($a) <=> basename($b) } @ARGV
};

for my $arg (@sorted)
{
    my %deps;
    my $module = do
    {
        basename($arg) =~ /^\d+\.(.+)\.changes$/;
        $1
    };

    open my $file, '<', $arg or die "Can't open $arg: $!";

    while (<$file>)
    {
        /^([ma])\s+(.+?)\s*$/ or die "Malformed change entry in $arg: $_";

        if ($1 eq 'm')
        {
            $deps{$files{$2}} = 1 if exists $files{$2};
            $files{$2}        = $module;
        }
        elsif ($1 eq 'a')
        {
            $deps{$files{$2}} = 1 if exists $files{$2};
        }
    }

    delete $deps{$module}; # don't depend on yourself
    $graph->add_vertex($module);
    $graph->add_edge($_, $module) for keys %deps;
}


print "digraph G {\n";
print "    node [shape=plaintext];\n";
print '    ', $_, ";\n"                       for sort $graph->vertices;
print '    ', $_->[0], ' -> ', $_->[1], ";\n" for sort $graph->edges;
print "}\n";
