#!/usr/bin/perl -CS
use strict;
use warnings;
use Cwd qw(abs_path);
use File::Basename;
use File::Slurp qw(slurp);
use Getopt::Long;
use Graph;
use JSON;

our $modules_path = (dirname dirname abs_path $0) . '/modules';
GetOptions('modules=s' => \$modules_path);
$modules_path =~ s{/$}{};

die 'Usage: depend [--modules=PATH] JSONFILE' if not @ARGV;
my $modules = decode_json slurp shift;


my $graph = Graph->new;
for my $module (@$modules) {
    $graph->add_vertex($module);
    my $deps = load_dependencies($module);
    $graph->add_edge($_, $module) for @$deps;
}


print "digraph G {\n";
print "    node [shape=plaintext];\n";
print '    ', $_, ";\n"                       for sort $graph->vertices;
print '    ', $_->[0], ' -> ', $_->[1], ";\n" for sort $graph->edges;
print "}\n";


while ($graph->vertices) {
    my %roots = map { $_ => undef } $graph->vertices;
    delete $roots{$_->[1]} for ($graph->edges);
    while (my ($r, undef) = each %roots) {
        print "$r\n";
        $graph->delete_vertex($r);
    }
    print '-' x 10, "\n";
}


sub load_dependencies {
    my ($module) = (@_);

    my $file = "$modules_path/$module/module.json";
    my $json;
    eval { $json = slurp $file };
    warn "$module ($file): $!\n" if $!;

    if (!$json) {
        print STDERR "Can't read $file, assuming no dependencies for $module\n";
        return [];
    }

    my $deps = {};
    eval { $deps = decode_json $json || {} };
    warn "$module ($file): $!\n" if $!;

    if (!$deps->{dependencies}) {
        print STDERR "No dependencies found for $module, assuming none\n";
    }
    $deps->{dependencies};
}
