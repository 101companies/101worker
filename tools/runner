#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);
use File::Basename;
use Getopt::Long;
use Graph;
use POSIX qw(strftime);
use YAML qw(LoadFile);


sub write_log
{   print strftime('[%Y-%m-%d %H:%M:%S] ', gmtime), @_, "\n"; }

sub roots_in
{
    my ($graph, @processes) = @_;
    my %roots = map { $_ => undef } $graph->vertices;
    delete $roots{$_->[1]} for $graph->edges;
    delete $roots{$_}      for @processes;
    keys %roots;
}

sub get_command
{
    my ($path, $module) = @_;
    "cd $path/$module; timeout -s KILL 1h make >module.log 2>&1"
}

sub run_sequential
{
    my ($path, $graph) = @_;

    while ($graph->vertices)
    {
        for my $module (roots_in($graph))
        {
            my $time = time;
            sleep 1; # because atime and mtime only has 1 second granularity

            write_log("Running $module");
            my $code = system get_command($path, $module);
            write_log("$module exited with code $code");
            $graph->delete_vertex($module);

            write_log('Gathering changes');
            system "../tools/changes $time ../.. "
                 . ">../../101results/depend/$module.json";
        }
    }
}

sub run_parallel
{
    my ($path, $graph) = @_;
    my %processes;

    while ($graph->vertices)
    {
        for my $module (roots_in($graph, values %processes))
        {
            my $pid = fork // die "Could not fork for $module: $!";
            if ($pid)
            {
                # this is the parent process
                $processes{$pid} = $module;
                write_log("$module started with PID $pid");
            }
            else
            {
                # this is the child process
                exec get_command($path, $module);
            }
        }

        my $pid = wait;
        if ($pid == -1)
        {
            my $these = join ' and ', values %processes;
            die "Don't know how this happened, but all my children are gone.\n"
              . "Last time I checked, $these were still playing outside.\n"
              . "Maybe the automatic reaper came and took them from me, but "
              . "I sure didn't tell him to do that. Now I have to die alone";
        }

        my $done = delete $processes{$pid};
        write_log("$done exited with code $?");
        $graph->delete_vertex($done);
    }
}


my $path     = (dirname dirname abs_path $0) . '/modules';
my $parallel = 0;
GetOptions('modules=s' => \$path, 'parallel=i' => \$parallel);
$path =~ s{/$}{};

my $graph = LoadFile(shift);
die 'Cyclic dependency: ' . $graph->find_a_cycle if $graph->has_a_cycle;

$parallel ? run_parallel($path, $graph) : run_sequential($path, $graph);
