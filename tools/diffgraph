#!/usr/bin/perl
use strict;
use warnings;
use Graph;
use YAML qw(LoadFile);

die 'Usage: diffgraph EXPECTED_GRAPH ACTUAL_GRAPH' if @ARGV != 2;
my $expected = LoadFile(shift);
my $actual   = LoadFile(shift);


print "digraph G {\n";
print "    node [shape=plaintext];\n";


my %expected_vset = map { $_ => 1 } $expected->vertices;
my   %actual_vset = map { $_ => 1 }   $actual->vertices;

for (sort keys %{{%expected_vset, %actual_vset}}) {
    print ' ' x 4;

    my $inex = exists $expected_vset{$_};
    my $inac = exists   $actual_vset{$_};
    print $_                                          if  $inex &&  $inac;
    print qq("MISSING: $_"    [shape=rect,color=red]) if  $inex && !$inac;
    print qq("UNEXPECTED: $_" [shape=rect,color=red]) if !$inex &&  $inac;

    print ";\n";
}


sub build_edge_set {
    my %set;
    $set{$_->[0]}{$_->[1]} = 1 for @_;
    %set
}

my %expected_eset = build_edge_set($expected->edges);
my   %actual_eset = build_edge_set(  $actual->edges);


sub unique_edges {
    my @edges;
    my %already;
    for (@_) {
        my ($src, $dst) = @$_;
        push @edges, $_ unless exists $already{$src}{$dst};
        $already{$src}{$dst} = 1;
    }
    @edges
}

for (unique_edges($expected->edges, $actual->edges)) {
    my ($src, $dst) = @$_;
    print "    $src -> $dst";

    my $inex = exists $expected_eset{$src}{$dst};
    my $inac = exists   $actual_eset{$src}{$dst};
    print qq( [color=blue]) if  $inex && !$inac;
    print qq( [color=red ])  if !$inex &&  $inac;

    print ";\n";
}

print "}\n";
